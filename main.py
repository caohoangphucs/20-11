from fastapi import FastAPI, UploadFile, Form
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from PIL import Image, ImageEnhance
import base64, os, uuid
from pydantic import BaseModel

app = FastAPI()

# ‚úÖ M·ªü to√†n quy·ªÅn CORS ƒë·ªÉ m·ªçi n∆°i ƒë·ªÅu g·ªçi ƒë∆∞·ª£c API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],          # Cho ph√©p t·∫•t c·∫£ domain
    allow_credentials=True,
    allow_methods=["*"],          # Cho ph√©p t·∫•t c·∫£ HTTP methods
    allow_headers=["*"],          # Cho ph√©p t·∫•t c·∫£ headers
)


def apply_frame(base_image_path, frame_path, output_path, pink_strength=0.25):
    base = Image.open(base_image_path).convert("RGBA")
    frame = Image.open(frame_path).convert("RGBA")
    base = base.resize(frame.size)

    # üå∏ T·∫°o l·ªõp ph·ªß m√†u h·ªìng nh·∫π
    pink_overlay = Image.new("RGBA", base.size, (255, 182, 193, int(255 * pink_strength)))
    base = Image.alpha_composite(base, pink_overlay)

    # ‚òÄÔ∏è TƒÉng s√°ng nh·∫π
    enhancer = ImageEnhance.Brightness(base)
    base = enhancer.enhance(1.1)

    # üñº Gh√©p khung
    combined = Image.alpha_composite(base, frame)
    combined.save(output_path, format="PNG")
    return output_path


@app.post("/apply_frame")
async def apply_frame_endpoint(
    image: UploadFile,
    pink_strength: float = Form(0.25)
):
    image_bytes = await image.read()
    base_path = "example.jpg"
    with open(base_path, "wb") as f:
        f.write(image_bytes)

    frame_path = "static/frame4.png"
    output_path = "anh_da_ghep_pink.png"
    apply_frame(base_path, frame_path, output_path, pink_strength=pink_strength)

    with open(output_path, "rb") as f:
        result_b64 = base64.b64encode(f.read()).decode("utf-8")

    return result_b64


class ImagePayload(BaseModel):
    image_b64: str


# =====================
# üß© API: Upload ·∫£nh base64 ‚Üí l∆∞u file ‚Üí tr·∫£ URL (JSON body)
# =====================
@app.post("/upload_base64")
async def upload_base64(payload: ImagePayload):
    """Nh·∫≠n ·∫£nh base64 (JSON), l∆∞u v√†o th∆∞ m·ª•c /image, v√† tr·∫£ v·ªÅ URL t·∫£i ·∫£nh"""
    try:
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        os.makedirs("image", exist_ok=True)

        # Sinh t√™n file ng·∫´u nhi√™n
        filename = f"{uuid.uuid4().hex}.png"
        file_path = os.path.join("image", filename)

        # Gi·∫£i m√£ base64 (h·ªó tr·ª£ c·∫£ data URL)
        image_b64 = payload.image_b64
        if image_b64.startswith("data:image"):
            image_b64 = image_b64.split(",", 1)[1]
        image_data = base64.b64decode(image_b64)

        # L∆∞u file
        with open(file_path, "wb") as f:
            f.write(image_data)

        # T·∫°o URL ƒë·ªÉ truy c·∫≠p ·∫£nh
        image_url = f"/image/{filename}"
        return {"filename": filename, "url": image_url}

    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)


# =====================
# üñº API: Tr·∫£ ·∫£nh trong /image
# =====================
@app.get("/image/{filename}")
def get_uploaded_image(filename: str):
    """Tr·∫£ file ·∫£nh t·ª´ th∆∞ m·ª•c /image"""
    file_path = os.path.join("image", filename)
    if not os.path.exists(file_path):
        return JSONResponse({"error": "File kh√¥ng t·ªìn t·∫°i."}, status_code=404)
    return FileResponse(file_path)


# ‚úÖ Mount static ƒë·ªÉ truy c·∫≠p index.html, frame2.png, frame4.png...
app.mount("/", StaticFiles(directory="static", html=True), name="static")
